import re
import sys
import json
from lark import Lark

"""
we want two things here
1. a generated grammar from the generalized_input.json file
    I'll convert it to a string (EBNF), because this is what Lark wants
2. a parser, which will be generated by Lark
"""
START_NAME = "start"
TERM_NAME = "term"
TERMINAL_NAME = "terminal"
TERMINAL_STRING = f"""
{TERMINAL_NAME}: (DIGIT | LETTER)+

%import common.DIGIT
%import common.LETTER
    """

def get_json(filename):
    f = open(filename, 'r')
    return json.load(f)

def generalized_input_to_regex(input):
    regex = "".join([re.escape(s) if isinstance(s, str) else "(.+)" for s in input])
    return re.compile(regex)

def generalized_input_to_rule_v5(input):
    return " ".join([f"/{re.escape(s)}/" if isinstance(s, str) else TERM_NAME for s in input])

def generalized_input_to_terminals_v5(input):
    return "\n| ".join(set([f"/{re.escape(s.get('removed'))}/" for s in input if not isinstance(s, str)]))

def generate_ebnf_v5(saved_inputs_filename, valid_inputs_filename):
    def format_entry(entry):
        return "".join([" ", generalized_input_to_rule_v5(entry.get("generalized").get("input"))])

    saved_data = get_json(saved_inputs_filename)
    valid_data = get_json(valid_inputs_filename)

    start_str = map(format_entry, saved_data)

    generalized_input_regexes = []
    for entry in saved_data:
        generalized_input = entry.get("generalized").get("input")
        r = generalized_input_to_regex(generalized_input)
        generalized_input_regexes.append(r)
    print(generalized_input_regexes)

    terminals = set()
    for entry in valid_data:
        valid_input = entry.get("data")
        for pattern in generalized_input_regexes:
            m = pattern.match(valid_input)
            if m is None:
                print("m is None")
            else:
                print(m.groups())
                terminals = terminals.union(m.groups())
    terminal_str = f"\n{TERMINAL_NAME}:" + "\n| ".join([f"/{re.escape(t)}/" for t in terminals])

    grammar = f"?{START_NAME}:"
    grammar += "\n|".join(start_str)
    grammar += f"\n{TERM_NAME}: {START_NAME} | {TERMINAL_NAME}"
    grammar += terminal_str

    return grammar



def main(argv):
    print(generate_ebnf_v5(argv[1], argv[2]))


if __name__ == "__main__":
    main(sys.argv)
