import sys
import json
from lark import Lark

"""
we want two things here
1. a generated grammar from the generalized_input.json file
    I'll convert it to a string (EBNF), because this is what Lark wants
2. a parser, which will be generated by Lark
"""
START_NAME = "start"
TERMINAL_NAME = "terminal"
TERMINAL_STRING = f"""
{TERMINAL_NAME}: STRING | NUMBER

%import common.ESCAPED_STRING   -> STRING
%import common.SIGNED_NUMBER    -> NUMBER
    """

def get_json(filename):
    f = open(filename, 'r')
    return json.load(f)


def generalized_input_to_rule(input):
    return " ".join(["".join(["\"", s, "\""]) if isinstance(s, str) else TERMINAL_NAME for s in input])


def generate_ebnf(filename):
    data = get_json(filename)
    grammar = f"{START_NAME}: {TERMINAL_NAME}\n"
    for entry in data:
        grammar = "".join([grammar, "\t| ", generalized_input_to_rule(entry.get("generalized").get("input")), "\n"])
    return "".join([grammar, TERMINAL_STRING])


def main(argv):
    print(generate_ebnf(argv[1]))


if __name__ == "__main__":
    main(sys.argv)
